package ml.projecttwo;

import ml.ARFFParser;
import ml.Matrix;

import java.io.IOException;
import java.util.*;

import static ml.projecttwo.Vector.*;

public class Main {

    public static final int k = 2;

    public static void main(String[] args) throws IOException {
        final int featuresStart = 0, featuresEnd = 784;
        final int labelsStart = 784, labelsEnd = 785;
        final int nFoldSize = 2;

        Matrix points = ARFFParser.loadARFF("G:\\Projects\\Project2\\DataMiningProjectTwo\\mnist_part.arff");
        Matrix features = points.subMatrixCols(featuresStart, featuresEnd);
        Matrix labels = points.subMatrixCols(labelsStart, labelsEnd);

//          List<Double> input = Arrays.asList(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,60.0,254.0,255.0,224.0,59.0,59.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,150.0,253.0,253.0,253.0,253.0,253.0,137.0,118.0,118.0,27.0,28.0,118.0,118.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,155.0,250.0,253.0,253.0,253.0,253.0,253.0,253.0,253.0,193.0,195.0,253.0,253.0,154.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.0,18.0,18.0,49.0,213.0,213.0,213.0,213.0,213.0,213.0,254.0,253.0,253.0,250.0,235.0,114.0,37.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,156.0,154.0,154.0,246.0,253.0,253.0,241.0,68.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,235.0,253.0,253.0,253.0,174.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,66.0,215.0,215.0,250.0,253.0,253.0,253.0,174.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,254.0,253.0,253.0,253.0,253.0,253.0,246.0,121.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,254.0,253.0,253.0,253.0,199.0,116.0,107.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,103.0,253.0,253.0,253.0,230.0,75.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,46.0,196.0,237.0,254.0,254.0,133.0,55.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,95.0,244.0,253.0,253.0,242.0,82.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,72.0,144.0,253.0,253.0,229.0,81.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,37.0,25.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.0,163.0,253.0,253.0,243.0,53.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,235.0,192.0,38.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,156.0,253.0,253.0,253.0,57.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,235.0,253.0,193.0,24.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,61.0,216.0,253.0,253.0,253.0,57.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,220.0,253.0,253.0,221.0,215.0,215.0,215.0,217.0,215.0,215.0,215.0,230.0,253.0,253.0,253.0,253.0,57.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,40.0,253.0,253.0,253.0,253.0,253.0,253.0,254.0,253.0,253.0,253.0,253.0,253.0,253.0,228.0,174.0,40.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,40.0,253.0,253.0,253.0,253.0,253.0,253.0,254.0,253.0,253.0,253.0,253.0,253.0,135.0,80.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,57.0,57.0,224.0,253.0,253.0,253.0,209.0,57.0,57.0,57.0,57.0,57.0,9.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);
//        Set<Integer> out = slowKnn(features, k, input);
//        for (int i : out) {
//            System.out.println(features.getRow(i));
//            System.out.println(labels.getRow(i));
//        }

        InstanceBasedLearner learner = new InstanceBasedLearner(k);
        learner.train(features, labels);

        //System.out.println(learner.predict(input));

        double mse = learner.nFoldCrossValidation(features, labels, nFoldSize);
        System.out.println(mse);
    }

    /**
     * Returns the indecies of k-rows in the matrix
     */
    static Set<Integer> slowKnn(Matrix points, int k, List<Double> point) {
        Set<Integer> indecies = new HashSet<Integer>();
        for (int i = 0; i < k; i++) {

            double closestDistance = Double.POSITIVE_INFINITY;
            int closestIndex = -1;
            for (int j = 0; j < points.getNumRows(); j++) {
                List<Double> row = points.getRow(j);

                double dist = distance(point, row);
                if (dist < closestDistance && !indecies.contains(j)) {
                    closestDistance = dist;
                    closestIndex = j;
                }
            }
            indecies.add(closestIndex);
        }
        return indecies;
    }

}
